- name: "Create private key for {{_common_name}}"
  community.crypto.openssl_privatekey:
    path: "{{ _path_key }}"

- name: Check whether certificate exists for {{_common_name}}
  stat:
    path: "{{_path_crt}}"
  register: certificate_admin_exists

- name: Check whether certificate exists for {{_common_name}}
  stat:
    path: "{{_path_crt}}"
  register: certificate_admin_exists

- name: Test whether that certificate is valid tomorrow for {{_common_name}}
  community.crypto.x509_certificate_info:
    path:  "{{_path_crt}}"
    valid_at:
      point_1: "{{_point_1 | default('+1d') }}"
  when: certificate_admin_exists.stat.exists
  register: valid

- name: Create certificate signing request (CSR) for {{_common_name}}
  community.crypto.openssl_csr_pipe:
    privatekey_path: "{{ _path_key }}"
    common_name: "{{_common_name}}"
    country_name: "{{cert_country_name}}"
    email_address: "{{email_address}}"
    organization_name: "{{ _organization_name | default(cert_organization_name)}}"
    organizational_unit_name: "{{cert_organizational_unit_name}}"
    state_or_province_name: "{{cert_state_or_province_name}}"
    key_usage: "{{ _key_usage | default(['keyCertSign','keyEncipherment']) }}"
      # - keyCertSign
      # - keyEncipherment
    extendedKeyUsage: "{{ _extendedKeyUsage | default(['serverAuth','clientAuth']) }}"
      # - serverAuth
      # - clientAuth
    subject_alt_name: "{{ _subject_alt_name | default([]) }}"


  when: not certificate_admin_exists.stat.exists or not valid.valid_at.point_1
  register: internal_csr

- name: "[{{groups.init[0]}}] Sign certificate with our CA for {{_common_name}}"
  community.crypto.x509_certificate_pipe:
    csr_content: "{{ internal_csr.csr }}"
    provider: ownca
    ownca_path: "{{_ca_pem }}"
    ownca_privatekey_path: "{{_ca_key }}"
    ownca_not_after: +365d  # valid for one year
    ownca_not_before: "-1d"  # valid since yesterday
  when: internal_csr.changed
  register: "certificate"
  delegate_to: '{{groups.init[0]}}'

- name: Write certificate file for {{_common_name}}
  copy:
    dest: "{{_path_crt}}"
    content: "{{ certificate.certificate }}"
  when: certificate is changed

#

- name: "[{{hostname}}] Read existing certificate cert"
  slurp:
    src: '{{ _path_crt }}'
  register: tmp_cert


- name: "[{{hostname}}] Read existing certificate Key"
  slurp:
    src: '{{_path_key}}'
  register: tmp_key

#

- name: set fact on INIT_CA_HOST nodes
  set_fact:
    "share_{{_common_name| replace('-','_') | replace(':','_')}}": { "key": "{{tmp_key}}", "crt": "{{tmp_cert}}" }
  delegate_to: "INIT_CA_HOST"
  delegate_facts: True
